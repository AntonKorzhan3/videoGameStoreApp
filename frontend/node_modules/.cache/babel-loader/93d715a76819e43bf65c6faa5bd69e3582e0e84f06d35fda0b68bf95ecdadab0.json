{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ruby32-x64\\\\bin\\\\videoGameStoreApp\\\\frontend\\\\src\\\\components\\\\EditOrderItems.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { updateOrderItems, getDetail } from \"../lib/api/order_items\";\nimport FormBody from \"./OrderItemsForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditOrderItems() {\n  _s();\n  // State to hold the actor's data for editing\n  const [value, setValue] = useState({\n    item_id: \"\",\n    quantity: \"\"\n  });\n\n  // Extract the URL parameters using useParams\n  const query = useParams();\n  // React Router hook for navigation\n  const navigate = useNavigate();\n\n  // Fetch actor details when the component mounts or the query changes\n  useEffect(() => {\n    fetchData(query);\n  }, [query]);\n\n  // Function to fetch actor details for editing\n  const fetchData = async query => {\n    try {\n      const response = await getDetail(query.id);\n      const {\n        item_id,\n        quantity\n      } = response.data;\n      // Set the fetched data in the state for editing\n      setValue({\n        item_id,\n        quantity\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Function to handle changes in input fields\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    // Update the state with the new value for the corresponding input field\n    setValue(prevValue => ({\n      ...prevValue,\n      [name]: value\n    }));\n  };\n\n  // Function to handle form submission for updating actor\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Update the actor's details using the provided data\n      await updateOrderItems(query.id, value);\n      // Navigate back to the main list after successful update\n      navigate(\"/orderItemsList\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormBody, {\n      handleChange: handleChange,\n      handleSubmit: handleSubmit,\n      value: value,\n      buttonType: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(EditOrderItems, \"aRvY/tTuNGtZDUbcG/omclmBd0Y=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditOrderItems;\nexport default EditOrderItems;\nvar _c;\n$RefreshReg$(_c, \"EditOrderItems\");","map":{"version":3,"names":["useEffect","useState","useNavigate","useParams","updateOrderItems","getDetail","FormBody","jsxDEV","_jsxDEV","EditOrderItems","_s","value","setValue","item_id","quantity","query","navigate","fetchData","response","id","data","error","console","handleChange","e","name","target","prevValue","handleSubmit","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","buttonType","_c","$RefreshReg$"],"sources":["C:/Ruby32-x64/bin/videoGameStoreApp/frontend/src/components/EditOrderItems.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { updateOrderItems, getDetail } from \"../lib/api/order_items\";\r\nimport FormBody from \"./OrderItemsForm\";\r\n\r\nfunction EditOrderItems() {\r\n  // State to hold the actor's data for editing\r\n  const [value, setValue] = useState({\r\n    item_id: \"\",\r\n    quantity: \"\",\r\n  });\r\n\r\n  // Extract the URL parameters using useParams\r\n  const query = useParams();\r\n  // React Router hook for navigation\r\n  const navigate = useNavigate();\r\n\r\n  // Fetch actor details when the component mounts or the query changes\r\n  useEffect(() => {\r\n    fetchData(query);\r\n  }, [query]);\r\n\r\n  // Function to fetch actor details for editing\r\n  const fetchData = async (query) => {\r\n    try {\r\n      const response = await getDetail(query.id);\r\n      const { item_id, quantity } = response.data;\r\n      // Set the fetched data in the state for editing\r\n      setValue({\r\n        item_id,\r\n        quantity,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // Function to handle changes in input fields\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    // Update the state with the new value for the corresponding input field\r\n    setValue((prevValue) => ({\r\n      ...prevValue,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  // Function to handle form submission for updating actor\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      // Update the actor's details using the provided data\r\n      await updateOrderItems(query.id, value);\r\n      // Navigate back to the main list after successful update\r\n      navigate(\"/orderItemsList\");\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Edit</h1>\r\n      {/* Render the form component with appropriate props */}\r\n      <FormBody\r\n        handleChange={handleChange}\r\n        handleSubmit={handleSubmit}\r\n        value={value}\r\n        buttonType=\"Update\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditOrderItems;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,gBAAgB,EAAEC,SAAS,QAAQ,wBAAwB;AACpE,OAAOC,QAAQ,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC;IACjCY,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAMC,KAAK,GAAGZ,SAAS,CAAC,CAAC;EACzB;EACA,MAAMa,QAAQ,GAAGd,WAAW,CAAC,CAAC;;EAE9B;EACAF,SAAS,CAAC,MAAM;IACdiB,SAAS,CAACF,KAAK,CAAC;EAClB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAME,SAAS,GAAG,MAAOF,KAAK,IAAK;IACjC,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMb,SAAS,CAACU,KAAK,CAACI,EAAE,CAAC;MAC1C,MAAM;QAAEN,OAAO;QAAEC;MAAS,CAAC,GAAGI,QAAQ,CAACE,IAAI;MAC3C;MACAR,QAAQ,CAAC;QACPC,OAAO;QACPC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;;EAED;EACA,MAAME,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEd;IAAM,CAAC,GAAGa,CAAC,CAACE,MAAM;IAChC;IACAd,QAAQ,CAAEe,SAAS,KAAM;MACvB,GAAGA,SAAS;MACZ,CAACF,IAAI,GAAGd;IACV,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMiB,YAAY,GAAG,MAAOJ,CAAC,IAAK;IAChCA,CAAC,CAACK,cAAc,CAAC,CAAC;IAClB,IAAI;MACF;MACA,MAAMzB,gBAAgB,CAACW,KAAK,CAACI,EAAE,EAAER,KAAK,CAAC;MACvC;MACAK,QAAQ,CAAC,iBAAiB,CAAC;IAC7B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACEb,OAAA;IAAKsB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBvB,OAAA;MAAAuB,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEb3B,OAAA,CAACF,QAAQ;MACPiB,YAAY,EAAEA,YAAa;MAC3BK,YAAY,EAAEA,YAAa;MAC3BjB,KAAK,EAAEA,KAAM;MACbyB,UAAU,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACzB,EAAA,CAnEQD,cAAc;EAAA,QAQPN,SAAS,EAEND,WAAW;AAAA;AAAAmC,EAAA,GAVrB5B,cAAc;AAqEvB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}